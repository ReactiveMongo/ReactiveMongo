version: 2.1

commands:
  setup_sbt:
    description: Get and install SBT
    parameters:
      sbt_version:
        type: string
        default: "1.8.2"
    steps:
      - restore_cache:
          name: Restore SBT cache
          keys:
            - &sbt_cache_key sbt-{{ arch }}-{{ checksum "project/build.properties" }}

      - run:
          name: Setup SBT
          command: |
                    if [ ! -x ~/sbt/bin/sbt ]; then
                      cd ~/
                      curl --silent -L -o sbt.tgz https://github.com/sbt/sbt/releases/download/v<< parameters.sbt_version >>/sbt-<< parameters.sbt_version >>.tgz
                      tar -xzvf sbt.tgz && rm -f sbt.tgz
                    fi

      - save_cache:
          name: Update SBT cache
          paths:
            - ~/sbt
          key: *sbt_cache_key

  build_n_tests:
    description: Build & Test
    parameters:
      jdk_version:
        type: string
        default: "openjdk8"
      scala_version:
        type: string
        default: "2.13.8"
      actor_module:
        type: string
        default: "akka"
      shaded:
        type: boolean
        default: true
      compressor:
        type: string
        default: ""
      category:
        type: string
        default: ""

    steps:
      - restore_cache:
          name: Restore Scala cache
          keys:
            - &scala_cache_key scala-{{ .Environment.CIRCLE_JOB }}-<< parameters.shaded >>-{{ checksum "version.sbt" }}_{{ checksum "build.sbt" }}-{{ checksum "project/Common.scala" }}-{{ checksum "project/Dependencies.scala" }}

      - restore_cache:
          name: Restore compilation cache
          keys:
          - &compile_cache_key compile-{{ arch }}-{{ .Revision }}-<< parameters.jdk_version >>-<< parameters.scala_version >>

      - run:
          name: Build & Test
          no_output_timeout: 15m
          command: |
                    export PATH=$PATH:~/sbt/bin
                    export SCALA_VERSION="<< parameters.scala_version >>"
                    export ACTOR_MODULE="<< parameters.actor_module >>"
                    SHADED="<< parameters.shaded >>"
                    export CI_CATEGORY="<< parameters.category >>"

                    if [ "x$USER" = "x" ]; then
                      export USER=`basename $HOME`
                    fi
                    
                    if [ ! "$SHADED" = "true" ]; then
                      export REACTIVEMONGO_SHADED=false
                    fi

                    C="<< parameters.compressor >>"
                    if [ ! "x$C" = "x" ]; then
                      export COMPRESSOR="$C"
                    fi

                    CMD="./.ci_scripts/validate.sh /tmp/integration-env.sh"

                    if [ "x$CI_CATEGORY" = "xINTEGRATION_TESTS" ]; then
                      TEST_TIMEOUT=420s
                      source /tmp/integration-env.sh
                      export MONGO_MINOR

                      if [ "$MONGO_PROFILE" = "x509" ]; then
                        TEST_TIMEOUT="960s"
                      elif [ ! "$MONGO_PROFILE" = "defaut" ]; then
                        TEST_TIMEOUT="540s"
                      fi
                      export TEST_TIMEOUT

                      ./.ci_scripts/retry.sh 2 $CMD
                    else
                      $CMD
                    fi

      - save_cache:
          name: Update compilation cache
          paths:
            - ~/repo/core/target/*shaded/scala-*
            - ~/repo/driver/target/*shaded/scala-*
          key: *compile_cache_key

      - save_cache:
          name: Update Scala cache
          paths:
            - ~/.sbt
            - ~/.ivy2
            - ~/.coursier/cache
            - ~/Library/Caches/Coursier
          key: *scala_cache_key

  setup_integration:
    description: Setup integration environment
    parameters:
      category:
        type: string
        default: "INTEGRATION_TESTS"
      mongo_version:
        type: string
      mongo_profile:
        type: string
    steps:
      - restore_cache:
          name: Restore MongoDB cache
          keys:
            - &mongo_cache_key mongo-<< parameters.mongo_version >>-<< parameters.mongo_profile >>

      - run:
          name: Prepare integration environment
          command: |
                    ./.ci_scripts/beforeInstall.sh << parameters.category >> << parameters.mongo_version >> << parameters.mongo_profile >> /tmp/integration-env.sh

      - save_cache:
          name: Update MongoDB cache
          paths:
            - ~/ssl
            - ~/mongodb-linux-x86_64-amazon-<< parameters.mongo_version >>
          key: *mongo_cache_key

      - run:
          name: Start integration services
          background: true
          command: |
                    if [ "x<< parameters.category >>" = "xINTEGRATION_TESTS" ]; then
                      ./.ci_scripts/fork-mongod.sh /tmp/integration-env.sh
                    fi

  collect_test_reports:
    description: Collect test reports
    steps:
      - run:
          name: Collect test report
          command: |
                    mkdir test-reports
                    find . -path '*/test-reports/*' -name '*.xml' \
                      -print -exec cp {} test-reports \;
          when: always

  trigger_build:
    description: Trigger a build using API
    parameters:
      organisation:
        type: string
        default: "ReactiveMongo"
      project:
        type: string
        default: ""
    steps:
      - run:
          name: Trigger build @ << parameters.project >>
          command: |
                    curl -X POST "https://circleci.com/api/v1.1/project/github/<< parameters.organisation >>/<< parameters.project >>/build?circle-token=${REACTIVEMONGO_API_TOKEN}"

  publish_snapshots:
    description: Publish artifacts to Snapshots repository
    parameters:
      shaded:
        type: boolean
        default: true
      compressor:
        type: string
        default: ""
    steps:
      - deploy:
          name: Publish artifacts to Sonatype Snapshots
          command: |
                    export JAVA_HOME=/usr/local/openjdk-8/
                    export PATH=$PATH:~/sbt/bin:$JAVA_HOME/bin

                    cd ~/repo
                    sbt --version || echo 'Missing SBT'

                    if [ ! "${CIRCLE_BRANCH}" = "master" ]; then
                      echo "Skipped on branch ${CIRCLE_BRANCH}"
                      exit 0
                    fi

                    V=`sbt ';project ReactiveMongo-Core ;show version' | grep -A 1 ReactiveMongo-Core | grep -v ReactiveMongo-Core | cut -d ' ' -f 2`

                    if [ `echo "$V" | grep -- '-SNAPSHOT' | wc -l` -eq 0 ]; then
                      S=`echo "$V" | perl -pe 's/([0-9]+)$/${\($1 + 1)}-SNAPSHOT/'`
                      echo "Cannot bump $V to $S"
                      echo "version in ThisBuild := \"$S\"" > version.sbt
                    fi
                    
                    export PUBLISH_REPO_NAME="Sonatype Nexus Repository Manager"
                    export PUBLISH_REPO_ID="oss.sonatype.org"
                    export PUBLISH_REPO_URL="https://oss.sonatype.org/content/repositories/snapshots"
                    
                    if [ "x$PUBLISH_USER" = "x" -o "x$PUBLISH_PASS" = "x" ]; then
                      echo "Missing publication credentials"
                      exit 1
                    fi
                    
                    export SHADED="<< parameters.shaded >>"
                    export SBT_OPTS="$SBT_OPTS -Dreactivemongo.collectThreadTrace=true"

                    echo "Publishing artifacts (shaded: $SHADED)"
                    
                    if [ "$SHADED" = "true" ]; then
                      sbt +publish
                    else
                      export REACTIVEMONGO_SHADED=false
                      sbt +publish
                    fi

executors:
  osx:
    macos:
      xcode: 12.5.1
  openjdk:
    parameters:
      version:
        type: integer
        default: 8
    docker:
      - image: cchantep/circleci-openjdk:<< parameters.version >>-jdk

jobs:
  unit_test_suite:
    description: Unit test suite

    parameters:
      e:
        type: executor
      os:
        type: string
        default: "linux"
      jdk_version:
        type: string
        default: "openjdk8"
      scala_version:
        type: string
        default: "2.13.8"
      actor_module:
        type: string
        default: "akka"
      shaded:
        type: boolean
        default: true

    executor: << parameters.e >>

    environment:
      OS_NAME: << parameters.os >>

    working_directory: ~/repo

    steps:
      - checkout
      - setup_sbt

      - build_n_tests:
          jdk_version: << parameters.jdk_version >>
          scala_version: << parameters.scala_version >>
          actor_module: << parameters.actor_module >>
          shaded: << parameters.shaded >>
          category: UNIT_TESTS

      - collect_test_reports
      - store_test_results:
          path: test-reports

  integration_test_suite:
    description: Integration test suite

    parameters:
      openjdk_version:
        type: integer
        default: 10
      scala_version:
        type: string
        default: "2.12.18"
      akka_version:
        type: string
        default: "2.5.23"
      actor_module:
        type: string
        default: "akka"
      shaded:
        type: boolean
        default: true
      compressor:
        type: string
        default: ""
      mongo_version:
        type: integer
        default: 5
      mongo_profile:
        type: string
        default: "default"

    docker:
      - image: cchantep/circleci-openjdk:<< parameters.openjdk_version >>-jdk

    working_directory: ~/repo

    environment:
      AKKA_VERSION: << parameters.akka_version >>
      ACTOR_MODULE: << parameters.actor_module >>
      MONGO_PROFILE: << parameters.mongo_profile >>
      MONGO_VER: << parameters.mongo_version >>
      OS_NAME: linux
   
    steps:
      - checkout

      - run:
          name: Print integration parameters
          no_output_timeout: 15m
          command: |
                    echo "MongoDB: version=$MONGO_VER; profile=$MONGO_PROFILE"
                    echo "JDK: openjdk<< parameters.openjdk_version >>"
                    echo "Scala: version=<< parameters.scala_version >>"
                    echo "Shaded? << parameters.shaded >>"
                    echo "Compressor: << parameters.compressor>>"
                    echo "Akka: version=$AKKA_VERSION"
                    echo "Actor module: $ACTOR_MODULE"

      - setup_integration:
          mongo_version: $MONGO_VER
          mongo_profile: $MONGO_PROFILE

      - setup_sbt

      - build_n_tests:
          category: INTEGRATION_TESTS
          jdk_version: openjdk<< parameters.openjdk_version >>
          scala_version: << parameters.scala_version >>
          shaded: << parameters.shaded >>
          actor_module: << parameters.actor_module >>
          compressor: << parameters.compressor >>

      - collect_test_reports
      - store_test_results:
          path: test-reports

  publish_snapshots:
    docker:
      - image: circleci/openjdk:8-jdk

    working_directory: ~/repo
    
    steps:
      - checkout
      - setup_sbt

      - restore_cache:
          name: Restore snapshot cache
          keys:
            - &snapshot_cache_key scala-{{ .Environment.CIRCLE_JOB }}-{{ checksum "build.sbt" }}-{{ checksum "project/Dependencies.scala" }}

      - publish_snapshots

      - publish_snapshots:
          shaded: false

      - save_cache:
          name: Update snapshot cache
          paths:
            - ~/.sbt
            - ~/.ivy2
            - ~/.coursier/cache
          key: *snapshot_cache_key

  trigger_dependent_builds:
    docker:
      - image: cimg/base:2020.01

    working_directory: ~/repo

    steps:
      - trigger_build:
          project: ReactiveMongo-Play-Json
      - trigger_build:
          project: ReactiveMongo-Streaming
      - trigger_build:
          project: ReactiveMongo-Monitoring

workflows:
  version: 2

  main_suite:
    jobs:
      - unit_test_suite:
          name: unit_osx_jdk8_scala212
          os: osx
          e: osx
          jdk_version: jdk8
          scala_version: 2.12.18
          shaded: false

      - unit_test_suite:
          name: unit_linux_openjdk10_scala212
          e:
            name: openjdk
            version: 10
          jdk_version: openjdk10
          scala_version: 2.12.18

      - unit_test_suite:
          name: unit_linux_openjdk10_scala212_pekko
          e:
            name: openjdk
            version: 10
          jdk_version: openjdk10
          scala_version: 2.12.18
          actor_module: pekko

      - integration_test_suite:
          name: mongo3_openjdk8_scala211_akka23
          openjdk_version: 8
          scala_version: 2.11.12
          akka_version: 2.3.13
          mongo_version: 3

      - integration_test_suite:
          name: mongo4_openjdk8_scala213_akka25_rs
          openjdk_version: 8
          scala_version: 2.13.8
          mongo_version: 4
          mongo_profile: rs
          compressor: zlib

      - integration_test_suite:
          name: mongo5_openjdk10_scala213_akka25_x509
          mongo_version: 5
          mongo_profile: x509
          scala_version: 2.13.8

      - integration_test_suite:
          name: mongo5_openjdk10_scala213_pekko_x509
          mongo_version: 5
          scala_version: 2.13.8
          actor_module: pekko

      - integration_test_suite:
          name: mongo6_openjdk11_scala31_akka26
          scala_version: '3.2.2'
          akka_version: 2.6.20
          openjdk_version: 11
          mongo_version: 6
          compressor: zstd

      - integration_test_suite:
          name: mongo5_openjdk10_scala212_akka25_invalidssl
          mongo_version: 5
          mongo_profile: invalid-ssl

      - integration_test_suite:
          name: mongo5_openjdk10_scala212_akka25_mutualssl
          mongo_version: 5
          mongo_profile: mutual-ssl

      - integration_test_suite:
          name: mongo6_openjdk11_scala31_akka26_rs
          scala_version: '3.2.2'
          akka_version: 2.6.20
          mongo_version: 6
          mongo_profile: rs
          shaded: false
          openjdk_version: 11

      - integration_test_suite:
          name: mongo5_openjdk10_scala212_akka25_x509
          mongo_version: 5
          mongo_profile: x509

      - integration_test_suite:
          name: mongo5_openjdk10_scala211_akka25
          mongo_version: 5
          scala_version: 2.11.12

      - integration_test_suite:
          name: mongo4_openjdk10_scala211_akka25_mutualssl
          scala_version: 2.11.12
          mongo_version: 4
          mongo_profile: mutual-ssl
          compressor: snappy

      - integration_test_suite:
          name: mongo5_openjdk11_scala211_akka25_rs
          scala_version: 2.11.12
          mongo_version: 5
          mongo_profile: rs
          openjdk_version: 11

      - integration_test_suite:
          name: mongo5_openjdk10_scala211_akka25_x509
          scala_version: 2.11.12
          mongo_version: 5
          mongo_profile: x509

      - publish_snapshots:
          filters:
            branches:
              only:
                - master
          requires:
            - unit_osx_jdk8_scala212
            - unit_linux_openjdk10_scala212
            - mongo3_openjdk8_scala211_akka23
            - mongo4_openjdk8_scala213_akka25_rs
            - mongo5_openjdk10_scala213_akka25_x509
            - mongo6_openjdk11_scala31_akka26
            - mongo5_openjdk10_scala212_akka25_invalidssl
            - mongo5_openjdk10_scala212_akka25_mutualssl
            - mongo6_openjdk11_scala31_akka26_rs
            - mongo5_openjdk10_scala212_akka25_x509
            - mongo5_openjdk10_scala211_akka25
            - mongo4_openjdk10_scala211_akka25_mutualssl
            - mongo5_openjdk11_scala211_akka25_rs
            - mongo5_openjdk10_scala211_akka25_x509
            - unit_linux_openjdk10_scala212_pekko
            - mongo5_openjdk10_scala213_pekko_x509

      - trigger_dependent_builds:
          filters:
            branches:
              only:
                - master
          requires:
            - publish_snapshots
