#! /usr/bin/env bash
  
set -e

# This script lives in each of the upstream repos. Add this to .travis.yml to
# run after each successful build (assuming that the script is in the root of
# the repo):
#   after_success:
#     - ./trigger-dependent-build
#
# There are three variables to set - `$auth_token`, `$endpoint`, and
# `$repo_id` - each is described below.
#

# An authorization token generated by running:
#   gem install travis
#   travis login
#   travis token
#
auth_token="$TRAVIS_AUTH_TOKEN"

if [ -z "$auth_token" ]; then
  echo "[ERROR] Missing token"
  exit 1
fi

# The Travis API endpoint. .com and .org are the commercial and free versions,
# respectively; enterprise users will have their own hostname.
#
endpoint=https://api.travis-ci.org

# The ID of the tests repo. To find the ID of a repo from its slug `$slug`, run:
#   curl -H 'Authorization: token $auth_token' https://api.travis-ci.org/repos/$slug
#
repo_id=$1

# Make an API request using the auth token set above. First argument is the path
# of the API method, all later arguments are passed to curl directly.
#
function travis-api {
  curl -s "$endpoint$1" \
       -H "Authorization: token $auth_token" \
       -H 'Content-Type: application/json' \
       "${@:2}"
}

# Get the build ID of the last master build.
#
last_master_build_id=`travis-api /repos/$repo_id/branches/master |
                      sed 's/{"branch":{"id":\([0-9]*\),.*/\1/'`

# Restart the last master build.
#
travis-api "/builds/$last_master_build_id/restart" -X POST

# Wait for the build to start using the new environment variables.
#
I=0
until travis-api "/builds/$last_master_build_id" | grep '"state":"started"'; do
  sleep 5

  if [ $I -gt 5 ]; then
    exit
  else
    I=`expr $I + 1`
  fi
done
